diff --git a/quill-async-mysql/src/test/scala/io/getquill/context/async/mysql/MysqlAsyncEncodingSpec.scala b/quill-async-mysql/src/test/scala/io/getquill/context/async/mysql/MysqlAsyncEncodingSpec.scala
index bc6b505..3c67ed4 100644
--- a/quill-async-mysql/src/test/scala/io/getquill/context/async/mysql/MysqlAsyncEncodingSpec.scala
+++ b/quill-async-mysql/src/test/scala/io/getquill/context/async/mysql/MysqlAsyncEncodingSpec.scala
@@ -9,6 +9,7 @@ import scala.concurrent.ExecutionContext.Implicits.global
 import scala.concurrent.Await
 import scala.concurrent.duration.Duration
 import java.util.Date
+import io.getquill.Query
 
 class MysqlAsyncEncodingSpec extends EncodingSpec {
 
diff --git a/quill-async-postgres/src/test/scala/io/getquill/context/async/postgres/PostgresAsyncEncodingSpec.scala b/quill-async-postgres/src/test/scala/io/getquill/context/async/postgres/PostgresAsyncEncodingSpec.scala
index 252ca69..0a18eea 100644
--- a/quill-async-postgres/src/test/scala/io/getquill/context/async/postgres/PostgresAsyncEncodingSpec.scala
+++ b/quill-async-postgres/src/test/scala/io/getquill/context/async/postgres/PostgresAsyncEncodingSpec.scala
@@ -10,6 +10,7 @@ import scala.concurrent.Await
 import scala.concurrent.duration.Duration
 import java.util.Date
 import java.util.UUID
+import io.getquill.Query
 
 class PostgresAsyncEncodingSpec extends EncodingSpec {
 
diff --git a/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/lagom/EncodingSpec.scala b/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/lagom/EncodingSpec.scala
index 06202ee..02bd02e 100644
--- a/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/lagom/EncodingSpec.scala
+++ b/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/lagom/EncodingSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.cassandra.lagom
 
 import io.getquill.context.cassandra.EncodingSpecHelper
+import io.getquill.Query
 
 class EncodingSpec extends EncodingSpecHelper {
   "encodes and decodes types" - {
diff --git a/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala b/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala
index d896d0f..058ca2d 100644
--- a/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala
+++ b/quill-cassandra-lagom/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala
@@ -3,6 +3,7 @@ package io.getquill.context.cassandra.streaming
 import akka.{ Done, NotUsed }
 import akka.stream.scaladsl.Source
 import io.getquill.context.cassandra.{ EncodingSpecHelper, utils }
+import io.getquill.Query
 
 import scala.concurrent.Future
 
diff --git a/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/monix/EncodingSpec.scala b/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/monix/EncodingSpec.scala
index d158e7b..575fdbf 100644
--- a/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/monix/EncodingSpec.scala
+++ b/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/monix/EncodingSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.cassandra.monix
 
 import io.getquill.context.cassandra.EncodingSpecHelper
+import io.getquill.Query
 
 class EncodingSpec extends EncodingSpecHelper {
   "encodes and decodes types" - {
diff --git a/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala b/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala
index 805f5cb..ba0fa4a 100644
--- a/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala
+++ b/quill-cassandra-monix/src/test/scala/io/getquill/context/cassandra/streaming/EncodingSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.context.cassandra.streaming
 
 import io.getquill.context.cassandra.EncodingSpecHelper
 import monix.reactive.Observable
+import io.getquill.Query
 
 class EncodingSpec extends EncodingSpecHelper {
   "encodes and decodes types" - {
diff --git a/quill-cassandra/src/main/scala/io/getquill/context/cassandra/Ops.scala b/quill-cassandra/src/main/scala/io/getquill/context/cassandra/Ops.scala
index 6abeb1d..78a2bb5 100644
--- a/quill-cassandra/src/main/scala/io/getquill/context/cassandra/Ops.scala
+++ b/quill-cassandra/src/main/scala/io/getquill/context/cassandra/Ops.scala
@@ -1,5 +1,7 @@
 package io.getquill.context.cassandra
 
+import io.getquill.{ Query, Action, Delete, Insert, EntityQuery }
+
 trait Ops {
   this: CassandraContext[_] =>
 
diff --git a/quill-cassandra/src/test/scala/io/getquill/context/cassandra/CqlIdiomSpec.scala b/quill-cassandra/src/test/scala/io/getquill/context/cassandra/CqlIdiomSpec.scala
index afcc079..0e23533 100644
--- a/quill-cassandra/src/test/scala/io/getquill/context/cassandra/CqlIdiomSpec.scala
+++ b/quill-cassandra/src/test/scala/io/getquill/context/cassandra/CqlIdiomSpec.scala
@@ -2,8 +2,9 @@ package io.getquill.context.cassandra
 
 import io.getquill._
 import io.getquill.idiom.StatementInterpolator._
-import io.getquill.ast.{ Action => AstAction, _ }
+import io.getquill.ast.{ Action => AstAction, Query => _, _ }
 import io.getquill.idiom.StringToken
+import io.getquill.Query
 
 class CqlIdiomSpec extends Spec {
 
diff --git a/quill-cassandra/src/test/scala/io/getquill/context/cassandra/EncodingSpec.scala b/quill-cassandra/src/test/scala/io/getquill/context/cassandra/EncodingSpec.scala
index aa5f20f..95e6983 100644
--- a/quill-cassandra/src/test/scala/io/getquill/context/cassandra/EncodingSpec.scala
+++ b/quill-cassandra/src/test/scala/io/getquill/context/cassandra/EncodingSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.context.cassandra
 
 import java.time.{ Instant, ZoneId, ZonedDateTime, LocalDate => Java8LocalDate }
 import java.util.Date
+import io.getquill.Query
 
 import com.datastax.driver.core.LocalDate
 
diff --git a/quill-cassandra/src/test/scala/io/getquill/context/cassandra/QueryResultTypeCassandraSpec.scala b/quill-cassandra/src/test/scala/io/getquill/context/cassandra/QueryResultTypeCassandraSpec.scala
index 79cde35..98a9a08 100644
--- a/quill-cassandra/src/test/scala/io/getquill/context/cassandra/QueryResultTypeCassandraSpec.scala
+++ b/quill-cassandra/src/test/scala/io/getquill/context/cassandra/QueryResultTypeCassandraSpec.scala
@@ -3,6 +3,7 @@ package io.getquill.context.cassandra
 import io.getquill.Spec
 import io.getquill.context.cassandra.encoding.Encoders
 import io.getquill.context.cassandra.encoding.Decoders
+import io.getquill.Ord
 
 trait QueryResultTypeCassandraSpec extends Spec {
 
diff --git a/quill-core-portable/src/main/scala/io/getquill/MirrorIdiom.scala b/quill-core-portable/src/main/scala/io/getquill/MirrorIdiom.scala
index 91f0b75..b58c085 100644
--- a/quill-core-portable/src/main/scala/io/getquill/MirrorIdiom.scala
+++ b/quill-core-portable/src/main/scala/io/getquill/MirrorIdiom.scala
@@ -2,7 +2,7 @@ package io.getquill
 
 import io.getquill.ast.Renameable.{ ByStrategy, Fixed }
 import io.getquill.ast.Visibility.Hidden
-import io.getquill.ast._
+import io.getquill.ast.{ Query => AstQuery, Action => AstAction, _ }
 import io.getquill.context.CanReturnClause
 import io.getquill.idiom.{ Idiom, SetContainsToken, Statement }
 import io.getquill.idiom.StatementInterpolator._
@@ -30,11 +30,11 @@ trait MirrorIdiomBase extends Idiom {
   }
 
   implicit def astTokenizer(implicit externalTokenizer: Tokenizer[External]): Tokenizer[Ast] = Tokenizer[Ast] {
-    case ast: Query               => ast.token
+    case ast: AstAction           => ast.token
     case ast: Function            => ast.token
     case ast: Value               => ast.token
     case ast: Operation           => ast.token
-    case ast: Action              => ast.token
+    case ast: AstQuery            => ast.token
     case ast: Ident               => ast.token
     case ast: ExternalIdent       => ast.token
     case ast: Property            => ast.token
@@ -69,7 +69,7 @@ trait MirrorIdiomBase extends Idiom {
     case Val(name, body) => stmt"val ${name.token} = ${body.token}"
   }
 
-  implicit def queryTokenizer(implicit externalTokenizer: Tokenizer[External]): Tokenizer[Query] = Tokenizer[Query] {
+  implicit def queryTokenizer(implicit externalTokenizer: Tokenizer[External]): Tokenizer[AstQuery] = Tokenizer[AstQuery] {
 
     case Entity.Opinionated(name, Nil, renameable) => stmt"${tokenizeName("querySchema", renameable).token}(${s""""$name"""".token})"
 
@@ -226,7 +226,7 @@ trait MirrorIdiomBase extends Idiom {
     case OnConflict.Existing(ident) => stmt"${ident.token}"
   }
 
-  implicit def actionTokenizer(implicit externalTokenizer: Tokenizer[External]): Tokenizer[Action] = Tokenizer[Action] {
+  implicit def actionTokenizer(implicit externalTokenizer: Tokenizer[External]): Tokenizer[AstAction] = Tokenizer[AstAction] {
     case Update(query, assignments)             => stmt"${query.token}.update(${assignments.token})"
     case Insert(query, assignments)             => stmt"${query.token}.insert(${assignments.token})"
     case Delete(query)                          => stmt"${query.token}.delete"
diff --git a/quill-core-portable/src/main/scala/io/getquill/Model.scala b/quill-core-portable/src/main/scala/io/getquill/Model.scala
new file mode 100644
index 0000000..088890a
--- /dev/null
+++ b/quill-core-portable/src/main/scala/io/getquill/Model.scala
@@ -0,0 +1,128 @@
+package io.getquill
+
+import io.getquill.quotation.NonQuotedException
+
+import scala.annotation.compileTimeOnly
+
+sealed trait Query[+T] {
+
+  def map[R](f: T => R): Query[R]
+
+  def flatMap[R](f: T => Query[R]): Query[R]
+
+  def concatMap[R, U](f: T => U)(implicit ev: U => Iterable[R]): Query[R]
+
+  def withFilter(f: T => Boolean): Query[T]
+  def filter(f: T => Boolean): Query[T]
+
+  def sortBy[R](f: T => R)(implicit ord: Ord[R]): Query[T]
+
+  def take(n: Int): Query[T]
+  def drop(n: Int): Query[T]
+
+  def ++[U >: T](q: Query[U]): Query[U]
+  def unionAll[U >: T](q: Query[U]): Query[U]
+  def union[U >: T](q: Query[U]): Query[U]
+
+  def groupBy[R](f: T => R): Query[(R, Query[T])]
+
+  def value[U >: T]: Option[T]
+  def min[U >: T]: Option[T]
+  def max[U >: T]: Option[T]
+  def avg[U >: T](implicit n: Numeric[U]): Option[BigDecimal]
+  def sum[U >: T](implicit n: Numeric[U]): Option[T]
+  def size: Long
+
+  def join[A >: T, B](q: Query[B]): JoinQuery[A, B, (A, B)]
+  def leftJoin[A >: T, B](q: Query[B]): JoinQuery[A, B, (A, Option[B])]
+  def rightJoin[A >: T, B](q: Query[B]): JoinQuery[A, B, (Option[A], B)]
+  def fullJoin[A >: T, B](q: Query[B]): JoinQuery[A, B, (Option[A], Option[B])]
+
+  def join[A >: T](on: A => Boolean): Query[A]
+  def leftJoin[A >: T](on: A => Boolean): Query[Option[A]]
+  def rightJoin[A >: T](on: A => Boolean): Query[Option[A]]
+
+  def nonEmpty: Boolean
+  def isEmpty: Boolean
+  def contains[B >: T](value: B): Boolean
+
+  def distinct: Query[T]
+
+  def nested: Query[T]
+
+  /**
+   *
+   * @param unquote is used for conversion of `Quoted[A]` to A` with `unquote`
+   * @return
+   */
+  def foreach[A <: Action[_], B](f: T => B)(implicit unquote: B => A): BatchAction[A]
+}
+
+sealed trait JoinQuery[A, B, R] extends Query[R] {
+  def on(f: (A, B) => Boolean): Query[R]
+}
+
+trait EntityQueryModel[T]
+  extends Query[T] {
+
+  override def withFilter(f: T => Boolean): EntityQueryModel[T]
+  override def filter(f: T => Boolean): EntityQueryModel[T]
+  override def map[R](f: T => R): EntityQueryModel[R]
+
+  def insert(value: T): Insert[T] = NonQuotedException()
+  def insert(f: (T => (Any, Any)), f2: (T => (Any, Any))*): Insert[T]
+
+  def update(value: T): Update[T] = NonQuotedException()
+  def update(f: (T => (Any, Any)), f2: (T => (Any, Any))*): Update[T]
+
+  def delete: Delete[T]
+}
+
+sealed trait Action[E]
+
+sealed trait Insert[E] extends Action[E] {
+  @compileTimeOnly(NonQuotedException.message)
+  def returning[R](f: E => R): ActionReturning[E, R] = NonQuotedException()
+
+  @compileTimeOnly(NonQuotedException.message)
+  def returningGenerated[R](f: E => R): ActionReturning[E, R] = NonQuotedException()
+
+  @compileTimeOnly(NonQuotedException.message)
+  def onConflictIgnore: Insert[E] = NonQuotedException()
+
+  @compileTimeOnly(NonQuotedException.message)
+  def onConflictIgnore(target: E => Any, targets: (E => Any)*): Insert[E] = NonQuotedException()
+
+  @compileTimeOnly(NonQuotedException.message)
+  def onConflictUpdate(assign: ((E, E) => (Any, Any)), assigns: ((E, E) => (Any, Any))*): Insert[E] = NonQuotedException()
+
+  /**
+   * Generates an atomic INSERT or UPDATE (upsert) action if supported.
+   *
+   * @param targets - conflict target
+   * @param assigns - update statement, declared as function: `(table, excluded) => (assign, result)`
+   *                `table` - is used to extract column for update assignment and reference existing row
+   *                `excluded` - aliases excluded table, e.g. row proposed for insertion.
+   *                `assign` - left hand side of assignment. Should be accessed from `table` argument
+   *                `result` - right hand side of assignment.
+   *
+   * Example usage:
+   * {{{
+   *   insert.onConflictUpdate(_.id)((t, e) => t.col -> (e.col + t.col))
+   * }}}
+   * If insert statement violates conflict target then the column `col` of row will be updated with sum of
+   * existing value and and proposed `col` in insert.
+   */
+  @compileTimeOnly(NonQuotedException.message)
+  def onConflictUpdate(target: E => Any, targets: (E => Any)*)(assign: ((E, E) => (Any, Any)), assigns: ((E, E) => (Any, Any))*): Insert[E] = NonQuotedException()
+}
+
+sealed trait Update[E] extends Action[E] {
+  @compileTimeOnly(NonQuotedException.message)
+  def returning[R](f: E => R): ActionReturning[E, R] = NonQuotedException()
+}
+
+sealed trait ActionReturning[E, Output] extends Action[E]
+sealed trait Delete[E] extends Action[E]
+
+sealed trait BatchAction[+A <: Action[_]]
diff --git a/quill-core-portable/src/main/scala/io/getquill/OrdModel.scala b/quill-core-portable/src/main/scala/io/getquill/OrdModel.scala
new file mode 100644
index 0000000..994e9a8
--- /dev/null
+++ b/quill-core-portable/src/main/scala/io/getquill/OrdModel.scala
@@ -0,0 +1,47 @@
+package io.getquill
+
+import io.getquill.ast.{ Asc, AscNullsFirst, AscNullsLast, Desc, DescNullsFirst, DescNullsLast, Ordering, TupleOrdering }
+
+case class Ord[T](ord: Ordering)
+
+object Ord {
+
+  def asc[T]: Ord[T] = Ord(Asc)
+
+  def desc[T]: Ord[T] = Ord(Desc)
+
+  def ascNullsFirst[T]: Ord[T] = Ord(AscNullsFirst)
+
+  def descNullsFirst[T]: Ord[T] = Ord(DescNullsFirst)
+
+  def ascNullsLast[T]: Ord[T] = Ord(AscNullsLast)
+
+  def descNullsLast[T]: Ord[T] = Ord(DescNullsLast)
+
+  def apply[T1, T2](o1: Ord[T1], o2: Ord[T2]): Ord[(T1, T2)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord)))
+
+  def apply[T1, T2, T3](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3]): Ord[(T1, T2, T3)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord)))
+
+  def apply[T1, T2, T3, T4](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4]): Ord[(T1, T2, T3, T4)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord)))
+
+  def apply[T1, T2, T3, T4, T5](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5]): Ord[(T1, T2, T3, T4, T5)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord)))
+
+  def apply[T1, T2, T3, T4, T5, T6](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6]): Ord[(T1, T2, T3, T4, T5, T6)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord)))
+
+  def apply[T1, T2, T3, T4, T5, T6, T7](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7]): Ord[(T1, T2, T3, T4, T5, T6, T7)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord)))
+
+  def apply[T1, T2, T3, T4, T5, T6, T7, T8](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7], o8: Ord[T8]): Ord[(T1, T2, T3, T4, T5, T6, T7, T8)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord, o8.ord)))
+
+  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7], o8: Ord[T8], o9: Ord[T9]): Ord[(T1, T2, T3, T4, T5, T6, T7, T8, T9)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord, o8.ord, o9.ord)))
+
+  def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7], o8: Ord[T8], o9: Ord[T9], o10: Ord[T10]): Ord[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)] =
+    Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord, o8.ord, o9.ord, o10.ord)))
+}
diff --git a/quill-core-portable/src/main/scala/io/getquill/dsl/OrdDsl.scala b/quill-core-portable/src/main/scala/io/getquill/dsl/OrdDsl.scala
index be7dbb2..1523a26 100644
--- a/quill-core-portable/src/main/scala/io/getquill/dsl/OrdDsl.scala
+++ b/quill-core-portable/src/main/scala/io/getquill/dsl/OrdDsl.scala
@@ -1,52 +1,8 @@
 package io.getquill.dsl
 
-import io.getquill.ast._
+import io.getquill.Ord
 
 private[dsl] trait OrdDsl {
 
-  case class Ord[T](ord: Ordering)
-
   implicit def implicitOrd[T]: Ord[T] = Ord.ascNullsFirst
-
-  object Ord {
-
-    def asc[T]: Ord[T] = Ord(Asc)
-
-    def desc[T]: Ord[T] = Ord(Desc)
-
-    def ascNullsFirst[T]: Ord[T] = Ord(AscNullsFirst)
-
-    def descNullsFirst[T]: Ord[T] = Ord(DescNullsFirst)
-
-    def ascNullsLast[T]: Ord[T] = Ord(AscNullsLast)
-
-    def descNullsLast[T]: Ord[T] = Ord(DescNullsLast)
-
-    def apply[T1, T2](o1: Ord[T1], o2: Ord[T2]): Ord[(T1, T2)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord)))
-
-    def apply[T1, T2, T3](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3]): Ord[(T1, T2, T3)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord)))
-
-    def apply[T1, T2, T3, T4](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4]): Ord[(T1, T2, T3, T4)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord)))
-
-    def apply[T1, T2, T3, T4, T5](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5]): Ord[(T1, T2, T3, T4, T5)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord)))
-
-    def apply[T1, T2, T3, T4, T5, T6](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6]): Ord[(T1, T2, T3, T4, T5, T6)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord)))
-
-    def apply[T1, T2, T3, T4, T5, T6, T7](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7]): Ord[(T1, T2, T3, T4, T5, T6, T7)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord)))
-
-    def apply[T1, T2, T3, T4, T5, T6, T7, T8](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7], o8: Ord[T8]): Ord[(T1, T2, T3, T4, T5, T6, T7, T8)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord, o8.ord)))
-
-    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7], o8: Ord[T8], o9: Ord[T9]): Ord[(T1, T2, T3, T4, T5, T6, T7, T8, T9)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord, o8.ord, o9.ord)))
-
-    def apply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](o1: Ord[T1], o2: Ord[T2], o3: Ord[T3], o4: Ord[T4], o5: Ord[T5], o6: Ord[T6], o7: Ord[T7], o8: Ord[T8], o9: Ord[T9], o10: Ord[T10]): Ord[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)] =
-      Ord(TupleOrdering(List(o1.ord, o2.ord, o3.ord, o4.ord, o5.ord, o6.ord, o7.ord, o8.ord, o9.ord, o10.ord)))
-  }
 }
diff --git a/quill-core/src/main/scala/io/getquill/ModelMacro.scala b/quill-core/src/main/scala/io/getquill/ModelMacro.scala
new file mode 100644
index 0000000..de7ec87
--- /dev/null
+++ b/quill-core/src/main/scala/io/getquill/ModelMacro.scala
@@ -0,0 +1,20 @@
+package io.getquill
+
+import scala.language.experimental.macros
+import io.getquill.dsl.QueryDslMacro
+
+sealed trait EntityQuery[T]
+  extends EntityQueryModel[T] {
+
+  override def withFilter(f: T => Boolean): EntityQuery[T]
+  override def filter(f: T => Boolean): EntityQuery[T]
+  override def map[R](f: T => R): EntityQuery[R]
+
+  override def insert(value: T): Insert[T] = macro QueryDslMacro.expandInsert[T]
+  def insert(f: (T => (Any, Any)), f2: (T => (Any, Any))*): Insert[T]
+
+  override def update(value: T): Update[T] = macro QueryDslMacro.expandUpdate[T]
+  def update(f: (T => (Any, Any)), f2: (T => (Any, Any))*): Update[T]
+
+  def delete: Delete[T]
+}
diff --git a/quill-core/src/main/scala/io/getquill/context/Context.scala b/quill-core/src/main/scala/io/getquill/context/Context.scala
index ef2fdeb..d34a553 100644
--- a/quill-core/src/main/scala/io/getquill/context/Context.scala
+++ b/quill-core/src/main/scala/io/getquill/context/Context.scala
@@ -7,7 +7,7 @@ import io.getquill.util.Messages.fail
 import java.io.Closeable
 
 import scala.util.Try
-import io.getquill.{ NamingStrategy, ReturnAction }
+import io.getquill.{ Query, Action, NamingStrategy, BatchAction, ReturnAction, ActionReturning }
 
 trait Context[Idiom <: io.getquill.idiom.Idiom, Naming <: NamingStrategy]
   extends Closeable
diff --git a/quill-core/src/main/scala/io/getquill/context/StreamingContext.scala b/quill-core/src/main/scala/io/getquill/context/StreamingContext.scala
index 2be484a..addbe99 100644
--- a/quill-core/src/main/scala/io/getquill/context/StreamingContext.scala
+++ b/quill-core/src/main/scala/io/getquill/context/StreamingContext.scala
@@ -3,6 +3,7 @@ package io.getquill.context
 import io.getquill.NamingStrategy
 import scala.language.higherKinds
 import scala.language.experimental.macros
+import io.getquill.Query
 
 trait StreamingContext[Idiom <: io.getquill.idiom.Idiom, Naming <: NamingStrategy] {
   this: Context[Idiom, Naming] =>
diff --git a/quill-core/src/main/scala/io/getquill/context/TranslateContext.scala b/quill-core/src/main/scala/io/getquill/context/TranslateContext.scala
index 5c37405..5c7adbb 100644
--- a/quill-core/src/main/scala/io/getquill/context/TranslateContext.scala
+++ b/quill-core/src/main/scala/io/getquill/context/TranslateContext.scala
@@ -6,6 +6,7 @@ import io.getquill.idiom.Idiom
 import scala.annotation.tailrec
 import scala.language.experimental.macros
 import scala.language.higherKinds
+import io.getquill.{ Query, Action, BatchAction }
 
 trait TranslateContext extends TranslateContextBase {
   this: Context[_ <: Idiom, _ <: NamingStrategy] =>
diff --git a/quill-core/src/main/scala/io/getquill/dsl/DynamicQueryDSL.scala b/quill-core/src/main/scala/io/getquill/dsl/DynamicQueryDSL.scala
index 1058319..c7c61d9 100644
--- a/quill-core/src/main/scala/io/getquill/dsl/DynamicQueryDSL.scala
+++ b/quill-core/src/main/scala/io/getquill/dsl/DynamicQueryDSL.scala
@@ -12,6 +12,7 @@ import io.getquill.util.Messages._
 import scala.annotation.tailrec
 import scala.util.DynamicVariable
 import scala.reflect.ClassTag
+import io.getquill.{ Query, Action => DslAction, ActionReturning, EntityQuery, Ord, Update, Delete, Insert }
 
 class DynamicQueryDslMacro(val c: MacroContext) {
   import c.universe._
@@ -41,8 +42,8 @@ trait DynamicQueryDsl {
     def dynamic: DynamicEntityQuery[T] = DynamicEntityQuery(q)
   }
 
-  implicit class ToDynamicAction[T](q: Quoted[Action[T]]) {
-    def dynamic: DynamicAction[Action[T]] = DynamicAction(q)
+  implicit class ToDynamicAction[T](q: Quoted[DslAction[T]]) {
+    def dynamic: DynamicAction[DslAction[T]] = DynamicAction(q)
   }
 
   implicit class ToDynamicInsert[T](q: Quoted[Insert[T]]) {
@@ -53,37 +54,58 @@ trait DynamicQueryDsl {
     def dynamic: DynamicUpdate[T] = DynamicUpdate(q)
   }
 
-  implicit class ToDynamicActionReturning[T, U](q: Quoted[ActionReturning[T, U]]) {
+  implicit class ToDynamicActionReturning[T, U](
+    q: Quoted[ActionReturning[T, U]]
+  ) {
     def dynamic: DynamicActionReturning[T, U] = DynamicActionReturning(q)
   }
 
   implicit def dynamicUnquote[T](d: DynamicQuery[T]): Query[T] = macro DynamicQueryDslMacro.dynamicUnquote
 
   implicit def toQuoted[T](q: DynamicQuery[T]): Quoted[Query[T]] = q.q
-  implicit def toQuoted[T](q: DynamicEntityQuery[T]): Quoted[EntityQuery[T]] = q.q
-  implicit def toQuoted[T <: Action[_]](q: DynamicAction[T]): Quoted[T] = q.q
+  implicit def toQuoted[T](q: DynamicEntityQuery[T]): Quoted[EntityQuery[T]] =
+    q.q
+  implicit def toQuoted[T <: DslAction[_]](q: DynamicAction[T]): Quoted[T] = q.q
 
   def dynamicQuery[T](implicit t: ClassTag[T]): DynamicEntityQuery[T] =
-    DynamicEntityQuery(splice[EntityQuery[T]](
-      Entity(t.runtimeClass.getName.split('.').last.split('$').last, Nil)
-    ))
+    DynamicEntityQuery(
+      splice[EntityQuery[T]](
+        Entity(t.runtimeClass.getName.split('.').last.split('$').last, Nil)
+      )
+    )
 
   case class DynamicAlias[T](property: Quoted[T] => Quoted[Any], name: String)
 
-  def alias[T](property: Quoted[T] => Quoted[Any], name: String): DynamicAlias[T] = DynamicAlias(property, name)
+  def alias[T](
+    property: Quoted[T] => Quoted[Any],
+    name:     String
+  ): DynamicAlias[T] = DynamicAlias(property, name)
 
   sealed trait DynamicSet[T, U]
 
-  case class DynamicSetValue[T, U](property: Quoted[T] => Quoted[U], value: Quoted[U]) extends DynamicSet[T, U]
+  case class DynamicSetValue[T, U](
+    property: Quoted[T] => Quoted[U],
+    value:    Quoted[U]
+  )
+    extends DynamicSet[T, U]
   case class DynamicSetEmpty[T, U]() extends DynamicSet[T, U]
 
-  def set[T, U](property: Quoted[T] => Quoted[U], value: Quoted[U]): DynamicSet[T, U] =
+  def set[T, U](
+    property: Quoted[T] => Quoted[U],
+    value:    Quoted[U]
+  ): DynamicSet[T, U] =
     DynamicSetValue(property, value)
 
-  def setValue[T, U](property: Quoted[T] => Quoted[U], value: U)(implicit enc: Encoder[U]): DynamicSet[T, U] =
+  def setValue[T, U](
+    property: Quoted[T] => Quoted[U],
+    value:    U
+  )(implicit enc: Encoder[U]): DynamicSet[T, U] =
     set[T, U](property, spliceLift(value))
 
-  def setOpt[T, U](property: Quoted[T] => Quoted[U], value: Option[U])(implicit enc: Encoder[U]): DynamicSet[T, U] =
+  def setOpt[T, U](property: Quoted[T] => Quoted[U], value: Option[U])(
+    implicit
+    enc: Encoder[U]
+  ): DynamicSet[T, U] =
     value match {
       case Some(v) => setValue(property, v)
       case None    => DynamicSetEmpty()
@@ -92,13 +114,18 @@ trait DynamicQueryDsl {
   def set[T, U](property: String, value: Quoted[U]): DynamicSet[T, U] =
     set((f: Quoted[T]) => splice(Property(f.ast, property)), value)
 
-  def setValue[T, U](property: String, value: U)(implicit enc: Encoder[U]): DynamicSet[T, U] =
+  def setValue[T, U](
+    property: String,
+    value:    U
+  )(implicit enc: Encoder[U]): DynamicSet[T, U] =
     set(property, spliceLift(value))
 
-  def dynamicQuerySchema[T](entity: String, columns: DynamicAlias[T]*): DynamicEntityQuery[T] = {
+  def dynamicQuerySchema[T](
+    entity:  String,
+    columns: DynamicAlias[T]*
+  ): DynamicEntityQuery[T] = {
     val aliases =
       columns.map { alias =>
-
         @tailrec def path(ast: Ast, acc: List[String] = Nil): List[String] =
           ast match {
             case Property(a, name) =>
@@ -107,9 +134,14 @@ trait DynamicQueryDsl {
               acc
           }
 
-        PropertyAlias(path(alias.property(splice[T](Ident("v"))).ast), alias.name)
+        PropertyAlias(
+          path(alias.property(splice[T](Ident("v"))).ast),
+          alias.name
+        )
       }
-    DynamicEntityQuery(splice[EntityQuery[T]](Entity.Opinionated(entity, aliases.toList, Fixed)))
+    DynamicEntityQuery(
+      splice[EntityQuery[T]](Entity.Opinionated(entity, aliases.toList, Fixed))
+    )
   }
 
   private[this] val nextIdentId = new DynamicVariable(0)
@@ -143,12 +175,21 @@ trait DynamicQueryDsl {
 
     protected[getquill] def q: Quoted[Query[T]]
 
-    protected[this] def transform[U, V, R](f: Quoted[U] => Quoted[V], t: (Ast, Ident, Ast) => Ast, r: Ast => R = dyn _) =
+    protected[this] def transform[U, V, R](
+      f: Quoted[U] => Quoted[V],
+      t: (Ast, Ident, Ast) => Ast,
+      r: Ast => R                 = dyn _
+    ) =
       withFreshIdent { v =>
         r(t(q.ast, v, f(splice(v)).ast))
       }
 
-    protected[this] def transformOpt[O, R, D <: DynamicQuery[T]](opt: Option[O], f: (Quoted[T], Quoted[O]) => Quoted[R], t: (Quoted[T] => Quoted[R]) => D, thiz: D)(implicit enc: Encoder[O]) =
+    protected[this] def transformOpt[O, R, D <: DynamicQuery[T]](
+      opt:  Option[O],
+      f:    (Quoted[T], Quoted[O]) => Quoted[R],
+      t:    (Quoted[T] => Quoted[R]) => D,
+      thiz: D
+    )(implicit enc: Encoder[O]) =
       opt match {
         case Some(o) =>
           t(v => f(v, spliceLift(o)))
@@ -168,17 +209,25 @@ trait DynamicQueryDsl {
     def withFilter(f: Quoted[T] => Quoted[Boolean]): DynamicQuery[T] =
       filter(f)
 
-    def filterOpt[O](opt: Option[O])(f: (Quoted[T], Quoted[O]) => Quoted[Boolean])(implicit enc: Encoder[O]): DynamicQuery[T] =
+    def filterOpt[O](opt: Option[O])(
+      f: (Quoted[T], Quoted[O]) => Quoted[Boolean]
+    )(implicit enc: Encoder[O]): DynamicQuery[T] =
       transformOpt(opt, f, filter, this)
 
-    def filterIf(cond: Boolean)(f: Quoted[T] => Quoted[Boolean]): DynamicQuery[T] =
+    def filterIf(
+      cond: Boolean
+    )(f: Quoted[T] => Quoted[Boolean]): DynamicQuery[T] =
       if (cond) filter(f)
       else this
 
-    def concatMap[R, U](f: Quoted[T] => Quoted[U])(implicit ev: U => Iterable[R]): DynamicQuery[R] =
+    def concatMap[R, U](
+      f: Quoted[T] => Quoted[U]
+    )(implicit ev: U => Iterable[R]): DynamicQuery[R] =
       transform(f, ConcatMap)
 
-    def sortBy[R](f: Quoted[T] => Quoted[R])(implicit ord: OrdDsl#Ord[R]): DynamicQuery[T] =
+    def sortBy[R](
+      f: Quoted[T] => Quoted[R]
+    )(implicit ord: Ord[R]): DynamicQuery[T] =
       transform(f, SortBy(_, _, _, ord.ord))
 
     def take(n: Quoted[Int]): DynamicQuery[T] =
@@ -238,16 +287,25 @@ trait DynamicQueryDsl {
     def join[A >: T, B](q2: Quoted[Query[B]]): DynamicJoinQuery[A, B, (A, B)] =
       DynamicJoinQuery(InnerJoin, q, q2)
 
-    def leftJoin[A >: T, B](q2: Quoted[Query[B]]): DynamicJoinQuery[A, B, (A, Option[B])] =
+    def leftJoin[A >: T, B](
+      q2: Quoted[Query[B]]
+    ): DynamicJoinQuery[A, B, (A, Option[B])] =
       DynamicJoinQuery(LeftJoin, q, q2)
 
-    def rightJoin[A >: T, B](q2: Quoted[Query[B]]): DynamicJoinQuery[A, B, (Option[A], B)] =
+    def rightJoin[A >: T, B](
+      q2: Quoted[Query[B]]
+    ): DynamicJoinQuery[A, B, (Option[A], B)] =
       DynamicJoinQuery(RightJoin, q, q2)
 
-    def fullJoin[A >: T, B](q2: Quoted[Query[B]]): DynamicJoinQuery[A, B, (Option[A], Option[B])] =
+    def fullJoin[A >: T, B](
+      q2: Quoted[Query[B]]
+    ): DynamicJoinQuery[A, B, (Option[A], Option[B])] =
       DynamicJoinQuery(FullJoin, q, q2)
 
-    private[this] def flatJoin[R](tpe: JoinType, on: Quoted[T] => Quoted[Boolean]): DynamicQuery[R] =
+    private[this] def flatJoin[R](
+      tpe: JoinType,
+      on:  Quoted[T] => Quoted[Boolean]
+    ): DynamicQuery[R] =
       withFreshIdent { v =>
         dyn(FlatJoin(tpe, q.ast, v, on(splice(v)).ast))
       }
@@ -255,10 +313,14 @@ trait DynamicQueryDsl {
     def join[A >: T](on: Quoted[A] => Quoted[Boolean]): DynamicQuery[A] =
       flatJoin(InnerJoin, on)
 
-    def leftJoin[A >: T](on: Quoted[A] => Quoted[Boolean]): DynamicQuery[Option[A]] =
+    def leftJoin[A >: T](
+      on: Quoted[A] => Quoted[Boolean]
+    ): DynamicQuery[Option[A]] =
       flatJoin(LeftJoin, on)
 
-    def rightJoin[A >: T](on: Quoted[A] => Quoted[Boolean]): DynamicQuery[Option[A]] =
+    def rightJoin[A >: T](
+      on: Quoted[A] => Quoted[Boolean]
+    ): DynamicQuery[Option[A]] =
       flatJoin(RightJoin, on)
 
     def nonEmpty: Quoted[Boolean] =
@@ -282,7 +344,11 @@ trait DynamicQueryDsl {
     override def toString = q.toString
   }
 
-  case class DynamicJoinQuery[A, B, R](tpe: JoinType, q1: Quoted[Query[A]], q2: Quoted[Query[B]]) {
+  case class DynamicJoinQuery[A, B, R](
+    tpe: JoinType,
+    q1:  Quoted[Query[A]],
+    q2:  Quoted[Query[B]]
+  ) {
     def on(f: (Quoted[A], Quoted[B]) => Quoted[Boolean]): DynamicQuery[R] = {
       withFreshIdent { iA =>
         withFreshIdent { iB =>
@@ -298,13 +364,19 @@ trait DynamicQueryDsl {
     private[this] def dyn[R](ast: Ast) =
       DynamicEntityQuery(splice[EntityQuery[R]](ast))
 
-    override def filter(f: Quoted[T] => Quoted[Boolean]): DynamicEntityQuery[T] =
+    override def filter(
+      f: Quoted[T] => Quoted[Boolean]
+    ): DynamicEntityQuery[T] =
       transform(f, Filter, dyn)
 
-    override def withFilter(f: Quoted[T] => Quoted[Boolean]): DynamicEntityQuery[T] =
+    override def withFilter(
+      f: Quoted[T] => Quoted[Boolean]
+    ): DynamicEntityQuery[T] =
       filter(f)
 
-    override def filterOpt[O](opt: Option[O])(f: (Quoted[T], Quoted[O]) => Quoted[Boolean])(implicit enc: Encoder[O]): DynamicEntityQuery[T] =
+    override def filterOpt[O](opt: Option[O])(
+      f: (Quoted[T], Quoted[O]) => Quoted[Boolean]
+    )(implicit enc: Encoder[O]): DynamicEntityQuery[T] =
       transformOpt(opt, f, filter, this)
 
     override def map[R](f: Quoted[T] => Quoted[R]): DynamicEntityQuery[R] =
@@ -314,7 +386,9 @@ trait DynamicQueryDsl {
 
     type DynamicAssignment[U] = ((Quoted[T] => Quoted[U]), U)
 
-    private[this] def assignemnts[S](l: List[DynamicSet[S, _]]): List[Assignment] =
+    private[this] def assignemnts[S](
+      l: List[DynamicSet[S, _]]
+    ): List[Assignment] =
       l.collect {
         case s: DynamicSetValue[_, _] =>
           val v = Ident("v")
@@ -322,25 +396,31 @@ trait DynamicQueryDsl {
       }
 
     def insert(l: DynamicSet[T, _]*): DynamicInsert[T] =
-      DynamicInsert(splice(Insert(DynamicEntityQuery.this.q.ast, assignemnts(l.toList))))
+      DynamicInsert(
+        splice(Insert(DynamicEntityQuery.this.q.ast, assignemnts(l.toList)))
+      )
 
     def updateValue(value: T): DynamicUpdate[T] = macro DynamicQueryDslMacro.updateValue
 
     def update(sets: DynamicSet[T, _]*): DynamicUpdate[T] =
-      DynamicUpdate(splice[Update[T]](Update(DynamicEntityQuery.this.q.ast, assignemnts(sets.toList))))
+      DynamicUpdate(
+        splice[Update[T]](
+          Update(DynamicEntityQuery.this.q.ast, assignemnts(sets.toList))
+        )
+      )
 
     def delete: DynamicDelete[T] =
       DynamicDelete(splice[Delete[T]](Delete(DynamicEntityQuery.this.q.ast)))
   }
 
   object DynamicAction {
-    def apply[A <: Action[_]](p: Quoted[A]) =
+    def apply[A <: DslAction[_]](p: Quoted[A]) =
       new DynamicAction[A] {
         override val q = p
       }
   }
 
-  sealed trait DynamicAction[A <: Action[_]] {
+  sealed trait DynamicAction[A <: DslAction[_]] {
     protected[getquill] def q: Quoted[A]
 
     override def toString = q.toString
@@ -363,15 +443,27 @@ trait DynamicQueryDsl {
         DynamicActionReturning(splice(Returning(q.ast, v, f(splice(v)).ast)))
       }
 
-    def returningGenerated[R](f: Quoted[E] => Quoted[R]): DynamicActionReturning[E, R] =
+    def returningGenerated[R](
+      f: Quoted[E] => Quoted[R]
+    ): DynamicActionReturning[E, R] =
       withFreshIdent { v =>
-        DynamicActionReturning(splice(ReturningGenerated(q.ast, v, f(splice(v)).ast)))
+        DynamicActionReturning(
+          splice(ReturningGenerated(q.ast, v, f(splice(v)).ast))
+        )
       }
 
     def onConflictIgnore: DynamicInsert[E] =
-      dyn(OnConflict(DynamicInsert.this.q.ast, OnConflict.NoTarget, OnConflict.Ignore))
-
-    def onConflictIgnore(targets: (Quoted[E] => Quoted[Any])*): DynamicInsert[E] = {
+      dyn(
+        OnConflict(
+          DynamicInsert.this.q.ast,
+          OnConflict.NoTarget,
+          OnConflict.Ignore
+        )
+      )
+
+    def onConflictIgnore(
+      targets: (Quoted[E] => Quoted[Any])*
+    ): DynamicInsert[E] = {
       val v = splice[E](Ident("v"))
       val properties =
         targets.toList.map { f =>
@@ -381,11 +473,21 @@ trait DynamicQueryDsl {
               fail(s"Invalid ignore column: $p")
           }
         }
-      dyn(OnConflict(DynamicInsert.this.q.ast, OnConflict.Properties(properties), OnConflict.Ignore))
+      dyn(
+        OnConflict(
+          DynamicInsert.this.q.ast,
+          OnConflict.Properties(properties),
+          OnConflict.Ignore
+        )
+      )
     }
   }
 
-  case class DynamicActionReturning[E, Output](q: Quoted[ActionReturning[E, Output]]) extends DynamicAction[ActionReturning[E, Output]]
-  case class DynamicUpdate[E](q: Quoted[Update[E]]) extends DynamicAction[Update[E]]
-  case class DynamicDelete[E](q: Quoted[Delete[E]]) extends DynamicAction[Delete[E]]
+  case class DynamicActionReturning[E, Output](
+    q: Quoted[ActionReturning[E, Output]]
+  ) extends DynamicAction[ActionReturning[E, Output]]
+  case class DynamicUpdate[E](q: Quoted[Update[E]])
+    extends DynamicAction[Update[E]]
+  case class DynamicDelete[E](q: Quoted[Delete[E]])
+    extends DynamicAction[Delete[E]]
 }
diff --git a/quill-core/src/main/scala/io/getquill/dsl/EncodingDsl.scala b/quill-core/src/main/scala/io/getquill/dsl/EncodingDsl.scala
index d3e6281..6a5ada9 100644
--- a/quill-core/src/main/scala/io/getquill/dsl/EncodingDsl.scala
+++ b/quill-core/src/main/scala/io/getquill/dsl/EncodingDsl.scala
@@ -5,6 +5,7 @@ import io.getquill.quotation.NonQuotedException
 import scala.annotation.compileTimeOnly
 import scala.language.experimental.macros
 import scala.language.higherKinds
+import io.getquill.Query
 
 trait LowPriorityImplicits {
   this: EncodingDsl =>
diff --git a/quill-core/src/main/scala/io/getquill/dsl/MetaDsl.scala b/quill-core/src/main/scala/io/getquill/dsl/MetaDsl.scala
index 84aa9aa..03506a3 100644
--- a/quill-core/src/main/scala/io/getquill/dsl/MetaDsl.scala
+++ b/quill-core/src/main/scala/io/getquill/dsl/MetaDsl.scala
@@ -1,6 +1,7 @@
 package io.getquill.dsl
 
 import scala.language.experimental.macros
+import io.getquill.{ Query, EntityQuery, Update, Insert }
 
 trait MetaDslLowPriorityImplicits {
   this: MetaDsl =>
diff --git a/quill-core/src/main/scala/io/getquill/dsl/MetaDslMacro.scala b/quill-core/src/main/scala/io/getquill/dsl/MetaDslMacro.scala
index dd57466..9d2ea46 100644
--- a/quill-core/src/main/scala/io/getquill/dsl/MetaDslMacro.scala
+++ b/quill-core/src/main/scala/io/getquill/dsl/MetaDslMacro.scala
@@ -70,7 +70,7 @@ class MetaDslMacro(val c: MacroContext) extends ValueComputation {
     val elements = flatten(q"x", value)
     if (elements.isEmpty)
       c.fail(s"Case class type ${t.tpe} has no values")
-    q"${c.prefix}.quote((q: ${c.prefix}.Query[$t]) => q.map(x => io.getquill.dsl.UnlimitedTuple(..$elements)))"
+    q"${c.prefix}.quote((q: io.getquill.Query[$t]) => q.map(x => io.getquill.dsl.UnlimitedTuple(..$elements)))"
   }
 
   private def extract[T](value: Value)(implicit t: WeakTypeTag[T]): Tree = {
@@ -129,7 +129,7 @@ class MetaDslMacro(val c: MacroContext) extends ValueComputation {
       q"""
         new ${c.prefix}.${TypeName(method.capitalize + "Meta")}[$t] {
           private[this] val _expand =
-            ${c.prefix}.quote((q: ${c.prefix}.EntityQuery[$t], value: $t) => q.${TermName(method)}(..$assignments))
+            ${c.prefix}.quote((q: io.getquill.EntityQuery[$t], value: $t) => q.${TermName(method)}(..$assignments))
           def expand = _expand
         }
       """
diff --git a/quill-core/src/main/scala/io/getquill/dsl/QueryDsl.scala b/quill-core/src/main/scala/io/getquill/dsl/QueryDsl.scala
index 58be3b3..d83da3b 100644
--- a/quill-core/src/main/scala/io/getquill/dsl/QueryDsl.scala
+++ b/quill-core/src/main/scala/io/getquill/dsl/QueryDsl.scala
@@ -2,6 +2,7 @@ package io.getquill.dsl
 
 import scala.language.experimental.macros
 import io.getquill.quotation.NonQuotedException
+import io.getquill.EntityQuery
 
 import scala.annotation.compileTimeOnly
 
@@ -53,127 +54,4 @@ private[getquill] trait QueryDsl {
       def =!=(b: T): Boolean = a != b
     }
   }
-
-  sealed trait Query[+T] {
-
-    def map[R](f: T => R): Query[R]
-
-    def flatMap[R](f: T => Query[R]): Query[R]
-
-    def concatMap[R, U](f: T => U)(implicit ev: U => Iterable[R]): Query[R]
-
-    def withFilter(f: T => Boolean): Query[T]
-    def filter(f: T => Boolean): Query[T]
-
-    def sortBy[R](f: T => R)(implicit ord: OrdDsl#Ord[R]): Query[T]
-
-    def take(n: Int): Query[T]
-    def drop(n: Int): Query[T]
-
-    def ++[U >: T](q: Query[U]): Query[U]
-    def unionAll[U >: T](q: Query[U]): Query[U]
-    def union[U >: T](q: Query[U]): Query[U]
-
-    def groupBy[R](f: T => R): Query[(R, Query[T])]
-
-    def value[U >: T]: Option[T]
-    def min[U >: T]: Option[T]
-    def max[U >: T]: Option[T]
-    def avg[U >: T](implicit n: Numeric[U]): Option[BigDecimal]
-    def sum[U >: T](implicit n: Numeric[U]): Option[T]
-    def size: Long
-
-    def join[A >: T, B](q: Query[B]): JoinQuery[A, B, (A, B)]
-    def leftJoin[A >: T, B](q: Query[B]): JoinQuery[A, B, (A, Option[B])]
-    def rightJoin[A >: T, B](q: Query[B]): JoinQuery[A, B, (Option[A], B)]
-    def fullJoin[A >: T, B](q: Query[B]): JoinQuery[A, B, (Option[A], Option[B])]
-
-    def join[A >: T](on: A => Boolean): Query[A]
-    def leftJoin[A >: T](on: A => Boolean): Query[Option[A]]
-    def rightJoin[A >: T](on: A => Boolean): Query[Option[A]]
-
-    def nonEmpty: Boolean
-    def isEmpty: Boolean
-    def contains[B >: T](value: B): Boolean
-
-    def distinct: Query[T]
-
-    def nested: Query[T]
-
-    /**
-     *
-     * @param unquote is used for conversion of [[Quoted[A]]] to [[A]] with [[unquote]]
-     * @return
-     */
-    def foreach[A <: Action[_], B](f: T => B)(implicit unquote: B => A): BatchAction[A]
-  }
-
-  sealed trait JoinQuery[A, B, R] extends Query[R] {
-    def on(f: (A, B) => Boolean): Query[R]
-  }
-
-  sealed trait EntityQuery[T]
-    extends Query[T] {
-
-    override def withFilter(f: T => Boolean): EntityQuery[T]
-    override def filter(f: T => Boolean): EntityQuery[T]
-    override def map[R](f: T => R): EntityQuery[R]
-
-    def insert(value: T): Insert[T] = macro QueryDslMacro.expandInsert[T]
-    def insert(f: (T => (Any, Any)), f2: (T => (Any, Any))*): Insert[T]
-
-    def update(value: T): Update[T] = macro QueryDslMacro.expandUpdate[T]
-    def update(f: (T => (Any, Any)), f2: (T => (Any, Any))*): Update[T]
-
-    def delete: Delete[T]
-  }
-
-  sealed trait Action[E]
-
-  sealed trait Insert[E] extends Action[E] {
-    @compileTimeOnly(NonQuotedException.message)
-    def returning[R](f: E => R): ActionReturning[E, R] = NonQuotedException()
-
-    @compileTimeOnly(NonQuotedException.message)
-    def returningGenerated[R](f: E => R): ActionReturning[E, R] = NonQuotedException()
-
-    @compileTimeOnly(NonQuotedException.message)
-    def onConflictIgnore: Insert[E] = NonQuotedException()
-
-    @compileTimeOnly(NonQuotedException.message)
-    def onConflictIgnore(target: E => Any, targets: (E => Any)*): Insert[E] = NonQuotedException()
-
-    @compileTimeOnly(NonQuotedException.message)
-    def onConflictUpdate(assign: ((E, E) => (Any, Any)), assigns: ((E, E) => (Any, Any))*): Insert[E] = NonQuotedException()
-
-    /**
-     * Generates an atomic INSERT or UPDATE (upsert) action if supported.
-     *
-     * @param targets - conflict target
-     * @param assigns - update statement, declared as function: `(table, excluded) => (assign, result)`
-     *                `table` - is used to extract column for update assignment and reference existing row
-     *                `excluded` - aliases excluded table, e.g. row proposed for insertion.
-     *                `assign` - left hand side of assignment. Should be accessed from `table` argument
-     *                `result` - right hand side of assignment.
-     *
-     * Example usage:
-     * {{{
-     *   insert.onConflictUpdate(_.id)((t, e) => t.col -> (e.col + t.col))
-     * }}}
-     * If insert statement violates conflict target then the column `col` of row will be updated with sum of
-     * existing value and and proposed `col` in insert.
-     */
-    @compileTimeOnly(NonQuotedException.message)
-    def onConflictUpdate(target: E => Any, targets: (E => Any)*)(assign: ((E, E) => (Any, Any)), assigns: ((E, E) => (Any, Any))*): Insert[E] = NonQuotedException()
-  }
-
-  sealed trait Update[E] extends Action[E] {
-    @compileTimeOnly(NonQuotedException.message)
-    def returning[R](f: E => R): ActionReturning[E, R] = NonQuotedException()
-  }
-
-  sealed trait ActionReturning[E, Output] extends Action[E]
-  sealed trait Delete[E] extends Action[E]
-
-  sealed trait BatchAction[+A <: Action[_]]
 }
diff --git a/quill-core/src/main/scala/io/getquill/monad/ScalaFutureIOMonad.scala b/quill-core/src/main/scala/io/getquill/monad/ScalaFutureIOMonad.scala
index ff7847d..b020d70 100644
--- a/quill-core/src/main/scala/io/getquill/monad/ScalaFutureIOMonad.scala
+++ b/quill-core/src/main/scala/io/getquill/monad/ScalaFutureIOMonad.scala
@@ -9,6 +9,7 @@ import scala.util.Success
 
 import scala.concurrent.Future
 import scala.concurrent.ExecutionContext
+import io.getquill.{ Query, Action, BatchAction, ActionReturning }
 
 trait ScalaFutureIOMonad extends IOMonad {
   this: Context[_, _] =>
diff --git a/quill-core/src/main/scala/io/getquill/monad/SyncIOMonad.scala b/quill-core/src/main/scala/io/getquill/monad/SyncIOMonad.scala
index 44a2e9d..f20c60a 100644
--- a/quill-core/src/main/scala/io/getquill/monad/SyncIOMonad.scala
+++ b/quill-core/src/main/scala/io/getquill/monad/SyncIOMonad.scala
@@ -6,6 +6,7 @@ import language.experimental.macros
 import io.getquill.context.Context
 import scala.annotation.tailrec
 import scala.util.Try
+import io.getquill.{ Query, Action, BatchAction, ActionReturning }
 
 trait SyncIOMonad extends IOMonad {
   this: Context[_, _] =>
diff --git a/quill-core/src/main/scala/io/getquill/quotation/Parsing.scala b/quill-core/src/main/scala/io/getquill/quotation/Parsing.scala
index ac1ad41..31b412e 100644
--- a/quill-core/src/main/scala/io/getquill/quotation/Parsing.scala
+++ b/quill-core/src/main/scala/io/getquill/quotation/Parsing.scala
@@ -6,7 +6,7 @@ import io.getquill.Embedded
 import io.getquill.context._
 import io.getquill.norm.BetaReduction
 import io.getquill.util.MacroContextExt.RichContext
-import io.getquill.dsl.{ CoreDsl, QueryDsl, ValueComputation }
+import io.getquill.dsl.{ CoreDsl, ValueComputation }
 import io.getquill.norm.capture.AvoidAliasConflict
 import io.getquill.idiom.Idiom
 
@@ -17,6 +17,7 @@ import io.getquill.ast.Implicits._
 import io.getquill.ast.Renameable.Fixed
 import io.getquill.ast.Visibility.{ Hidden, Visible }
 import io.getquill.util.Interleave
+import io.getquill.{ Query => DslQuery, Update => DslUpdate, Insert => DslInsert }
 
 trait Parsing extends ValueComputation {
   this: Quotation =>
@@ -183,47 +184,47 @@ trait Parsing extends ValueComputation {
     case q"$pack.impliedQuerySchema[$t](${ name: String }, ..$properties)" =>
       Entity(name, properties.map(propertyAliasParser(_)))
 
-    case q"$source.filter(($alias) => $body)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.filter(($alias) => $body)" if (is[DslQuery[Any]](source)) =>
       Filter(astParser(source), identParser(alias), astParser(body))
 
-    case q"$source.withFilter(($alias) => $body)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.withFilter(($alias) => $body)" if (is[DslQuery[Any]](source)) =>
       Filter(astParser(source), identParser(alias), astParser(body))
 
-    case q"$source.map[$t](($alias) => $body)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.map[$t](($alias) => $body)" if (is[DslQuery[Any]](source)) =>
       Map(astParser(source), identParser(alias), astParser(body))
 
-    case q"$source.flatMap[$t](($alias) => $body)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.flatMap[$t](($alias) => $body)" if (is[DslQuery[Any]](source)) =>
       FlatMap(astParser(source), identParser(alias), astParser(body))
 
-    case q"$source.concatMap[$t, $u](($alias) => $body)($ev)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.concatMap[$t, $u](($alias) => $body)($ev)" if (is[DslQuery[Any]](source)) =>
       ConcatMap(astParser(source), identParser(alias), astParser(body))
 
-    case q"$source.sortBy[$t](($alias) => $body)($ord)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.sortBy[$t](($alias) => $body)($ord)" if (is[DslQuery[Any]](source)) =>
       SortBy(astParser(source), identParser(alias), astParser(body), astParser(ord))
 
-    case q"$source.groupBy[$t](($alias) => $body)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.groupBy[$t](($alias) => $body)" if (is[DslQuery[Any]](source)) =>
       GroupBy(astParser(source), identParser(alias), astParser(body))
 
-    case q"$a.value[$t]" if (is[CoreDsl#Query[Any]](a))   => astParser(a)
-    case q"$a.min[$t]" if (is[CoreDsl#Query[Any]](a))     => Aggregation(AggregationOperator.`min`, astParser(a))
-    case q"$a.max[$t]" if (is[CoreDsl#Query[Any]](a))     => Aggregation(AggregationOperator.`max`, astParser(a))
-    case q"$a.avg[$t]($n)" if (is[CoreDsl#Query[Any]](a)) => Aggregation(AggregationOperator.`avg`, astParser(a))
-    case q"$a.sum[$t]($n)" if (is[CoreDsl#Query[Any]](a)) => Aggregation(AggregationOperator.`sum`, astParser(a))
-    case q"$a.size" if (is[CoreDsl#Query[Any]](a))        => Aggregation(AggregationOperator.`size`, astParser(a))
+    case q"$a.value[$t]" if (is[DslQuery[Any]](a))   => astParser(a)
+    case q"$a.min[$t]" if (is[DslQuery[Any]](a))     => Aggregation(AggregationOperator.`min`, astParser(a))
+    case q"$a.max[$t]" if (is[DslQuery[Any]](a))     => Aggregation(AggregationOperator.`max`, astParser(a))
+    case q"$a.avg[$t]($n)" if (is[DslQuery[Any]](a)) => Aggregation(AggregationOperator.`avg`, astParser(a))
+    case q"$a.sum[$t]($n)" if (is[DslQuery[Any]](a)) => Aggregation(AggregationOperator.`sum`, astParser(a))
+    case q"$a.size" if (is[DslQuery[Any]](a))        => Aggregation(AggregationOperator.`size`, astParser(a))
 
-    case q"$source.take($n)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.take($n)" if (is[DslQuery[Any]](source)) =>
       Take(astParser(source), astParser(n))
 
-    case q"$source.drop($n)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.drop($n)" if (is[DslQuery[Any]](source)) =>
       Drop(astParser(source), astParser(n))
 
-    case q"$source.union[$t]($n)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.union[$t]($n)" if (is[DslQuery[Any]](source)) =>
       Union(astParser(source), astParser(n))
 
-    case q"$source.unionAll[$t]($n)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.unionAll[$t]($n)" if (is[DslQuery[Any]](source)) =>
       UnionAll(astParser(source), astParser(n))
 
-    case q"$source.++[$t]($n)" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.++[$t]($n)" if (is[DslQuery[Any]](source)) =>
       UnionAll(astParser(source), astParser(n))
 
     case q"${ joinCallParser(typ, a, Some(b)) }.on(($aliasA, $aliasB) => $body)" =>
@@ -235,10 +236,10 @@ trait Parsing extends ValueComputation {
     case q"${ joinCallParser(typ, a, b) }" =>
       c.fail("a join clause must be followed by 'on'.")
 
-    case q"$source.distinct" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.distinct" if (is[DslQuery[Any]](source)) =>
       Distinct(astParser(source))
 
-    case q"$source.nested" if (is[CoreDsl#Query[Any]](source)) =>
+    case q"$source.nested" if (is[DslQuery[Any]](source)) =>
       io.getquill.ast.Nested(astParser(source))
 
   }
@@ -269,14 +270,14 @@ trait Parsing extends ValueComputation {
   }
 
   val joinCallParser: Parser[(JoinType, Ast, Option[Ast])] = Parser[(JoinType, Ast, Option[Ast])] {
-    case q"$a.join[$t, $u]($b)" if (is[CoreDsl#Query[Any]](a))      => (InnerJoin, astParser(a), Some(astParser(b)))
-    case q"$a.leftJoin[$t, $u]($b)" if (is[CoreDsl#Query[Any]](a))  => (LeftJoin, astParser(a), Some(astParser(b)))
-    case q"$a.rightJoin[$t, $u]($b)" if (is[CoreDsl#Query[Any]](a)) => (RightJoin, astParser(a), Some(astParser(b)))
-    case q"$a.fullJoin[$t, $u]($b)" if (is[CoreDsl#Query[Any]](a))  => (FullJoin, astParser(a), Some(astParser(b)))
-
-    case q"$a.join[$t]" if (is[CoreDsl#Query[Any]](a))              => (InnerJoin, astParser(a), None)
-    case q"$a.leftJoin[$t]" if (is[CoreDsl#Query[Any]](a))          => (LeftJoin, astParser(a), None)
-    case q"$a.rightJoin[$t]" if (is[CoreDsl#Query[Any]](a))         => (RightJoin, astParser(a), None)
+    case q"$a.join[$t, $u]($b)" if (is[DslQuery[Any]](a))      => (InnerJoin, astParser(a), Some(astParser(b)))
+    case q"$a.leftJoin[$t, $u]($b)" if (is[DslQuery[Any]](a))  => (LeftJoin, astParser(a), Some(astParser(b)))
+    case q"$a.rightJoin[$t, $u]($b)" if (is[DslQuery[Any]](a)) => (RightJoin, astParser(a), Some(astParser(b)))
+    case q"$a.fullJoin[$t, $u]($b)" if (is[DslQuery[Any]](a))  => (FullJoin, astParser(a), Some(astParser(b)))
+
+    case q"$a.join[$t]" if (is[DslQuery[Any]](a))              => (InnerJoin, astParser(a), None)
+    case q"$a.leftJoin[$t]" if (is[DslQuery[Any]](a))          => (LeftJoin, astParser(a), None)
+    case q"$a.rightJoin[$t]" if (is[DslQuery[Any]](a))         => (RightJoin, astParser(a), None)
   }
 
   val infixParser: Parser[Ast] = Parser[Ast] {
@@ -639,12 +640,12 @@ trait Parsing extends ValueComputation {
 
   val setOperationParser: Parser[Operation] = {
     val unary =
-      operationParser(is[CoreDsl#Query[Any]](_)) {
+      operationParser(is[DslQuery[Any]](_)) {
         case "isEmpty"  => SetOperator.`isEmpty`
         case "nonEmpty" => SetOperator.`nonEmpty`
       }
     Parser[Operation] {
-      case q"$a.contains[$t]($b)" if (is[CoreDsl#Query[Any]])(a) =>
+      case q"$a.contains[$t]($b)" if (is[DslQuery[Any]])(a) =>
         BinaryOperation(astParser(a), SetOperator.`contains`, astParser(b))
       case unary(op) => op
     }
@@ -902,7 +903,7 @@ trait Parsing extends ValueComputation {
       idiomReturnCapability.verifyAst(bodyAst)
       ReturningGenerated(astParser(action), ident, bodyAst)
 
-    case q"$query.foreach[$t1, $t2](($alias) => $body)($f)" if (is[CoreDsl#Query[Any]](query)) =>
+    case q"$query.foreach[$t1, $t2](($alias) => $body)($f)" if (is[DslQuery[Any]](query)) =>
       // If there are actions inside the subtree, we need to do some additional sanitizations
       // of the variables so that their content will not collide with code that we have generated.
       AvoidAliasConflict.sanitizeVariables(Foreach(astParser(query), identParser(alias), astParser(body)), dangerousVariables)
@@ -921,7 +922,7 @@ trait Parsing extends ValueComputation {
 
     (ident == originalBody, actionType.tpe) match {
       // Note, tuples are also case classes so this also matches for tuples
-      case (true, ClassTypeRefMatch(cls, List(arg))) if (cls == asClass[QueryDsl#Insert[_]] || cls == asClass[QueryDsl#Update[_]]) && isTypeCaseClass(arg) =>
+      case (true, ClassTypeRefMatch(cls, List(arg))) if (cls == asClass[DslInsert[_]] || cls == asClass[DslUpdate[_]]) && isTypeCaseClass(arg) =>
 
         val elements = flatten(q"${TermName(ident.name)}", value("Decoder", arg))
         if (elements.size == 0) c.fail("Case class in the 'returning' clause has no values")
diff --git a/quill-core/src/test/scala/io/getquill/OpsSpec.scala b/quill-core/src/test/scala/io/getquill/OpsSpec.scala
index 7583052..1913275 100644
--- a/quill-core/src/test/scala/io/getquill/OpsSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/OpsSpec.scala
@@ -2,9 +2,9 @@ package test
 
 import io.getquill.Spec
 import io.getquill.ast._
-import io.getquill.testContext.EntityQuery
+import io.getquill.EntityQuery
 import io.getquill.testContext.InfixInterpolator
-import io.getquill.testContext.Query
+import io.getquill.Query
 import io.getquill.testContext.TestEntity
 import io.getquill.testContext.qr1
 import io.getquill.testContext.query
diff --git a/quill-core/src/test/scala/io/getquill/context/ContextMacroSpec.scala b/quill-core/src/test/scala/io/getquill/context/ContextMacroSpec.scala
index 80d825e..06e33a4 100644
--- a/quill-core/src/test/scala/io/getquill/context/ContextMacroSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/context/ContextMacroSpec.scala
@@ -13,6 +13,8 @@ import io.getquill.Literal
 import io.getquill.Escape
 import io.getquill.UpperCase
 import io.getquill.SnakeCase
+import io.getquill.Action
+import io.getquill.Query
 
 class ContextMacroSpec extends Spec {
 
diff --git a/quill-core/src/test/scala/io/getquill/context/mirror/MirrorIdiomSpec.scala b/quill-core/src/test/scala/io/getquill/context/mirror/MirrorIdiomSpec.scala
index f81a82d..5a0c2de 100644
--- a/quill-core/src/test/scala/io/getquill/context/mirror/MirrorIdiomSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/context/mirror/MirrorIdiomSpec.scala
@@ -2,12 +2,13 @@ package io.getquill.context.mirror
 
 import io.getquill.MirrorIdiom
 import io.getquill.Spec
-import io.getquill.testContext
 import io.getquill.testContext._
 import io.getquill.idiom.StatementInterpolator._
 import io.getquill.Literal
 import io.getquill.ast.Ast
 import io.getquill.ast._
+import io.getquill.Ord
+import io.getquill.Query
 
 class MirrorIdiomSpec extends Spec {
 
@@ -168,14 +169,14 @@ class MirrorIdiomSpec extends Spec {
   "shows operations" - {
     "unary" in {
       val q = quote {
-        (xs: testContext.Query[_]) => !xs.nonEmpty
+        (xs: Query[_]) => !xs.nonEmpty
       }
       stmt"${(q.ast: Ast).token}" mustEqual
         stmt"""(xs) => !xs.nonEmpty"""
     }
     "binary" in {
       val q = quote {
-        (xs: testContext.Query[_]) => xs.nonEmpty && xs != null
+        (xs: Query[_]) => xs.nonEmpty && xs != null
       }
       stmt"${(q.ast: Ast).token}" mustEqual
         stmt"""(xs) => xs.nonEmpty && (xs != null)"""
@@ -249,14 +250,14 @@ class MirrorIdiomSpec extends Spec {
     "prostfix" - {
       "isEmpty" in {
         val q = quote {
-          (xs: testContext.Query[_]) => xs.isEmpty
+          (xs: Query[_]) => xs.isEmpty
         }
         stmt"${(q.ast: Ast).token}" mustEqual
           stmt"""(xs) => xs.isEmpty"""
       }
       "nonEmpty" in {
         val q = quote {
-          (xs: testContext.Query[_]) => xs.nonEmpty
+          (xs: Query[_]) => xs.nonEmpty
         }
         stmt"${(q.ast: Ast).token}" mustEqual
           stmt"""(xs) => xs.nonEmpty"""
@@ -488,8 +489,8 @@ class MirrorIdiomSpec extends Spec {
         stmt"""querySchema("TestEntity").filter(t => infix"$${t.s} == 's'")"""
     }
     "as quoted" in {
-      implicit class RichQuoted[T](q: Quoted[testContext.Query[T]]) {
-        def func = quote(infix"$q.func".as[testContext.Query[T]])
+      implicit class RichQuoted[T](q: Quoted[Query[T]]) {
+        def func = quote(infix"$q.func".as[Query[T]])
       }
       val q = quote {
         qr1.func
diff --git a/quill-core/src/test/scala/io/getquill/dsl/MetaDslSpec.scala b/quill-core/src/test/scala/io/getquill/dsl/MetaDslSpec.scala
index 280cb02..8c9876e 100644
--- a/quill-core/src/test/scala/io/getquill/dsl/MetaDslSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/dsl/MetaDslSpec.scala
@@ -3,6 +3,7 @@ package io.getquill.dsl
 import io.getquill.Spec
 import io.getquill.testContext._
 import io.getquill.context.mirror.Row
+import io.getquill.Query
 
 class MetaDslSpec extends Spec {
 
diff --git a/quill-core/src/test/scala/io/getquill/dsl/QueryDslSpec.scala b/quill-core/src/test/scala/io/getquill/dsl/QueryDslSpec.scala
index 264b4e5..1393092 100644
--- a/quill-core/src/test/scala/io/getquill/dsl/QueryDslSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/dsl/QueryDslSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.dsl
 
 import io.getquill.testContext._
 import io.getquill.Spec
+import io.getquill.EntityQuery
 
 class QueryDslSpec extends Spec {
 
diff --git a/quill-core/src/test/scala/io/getquill/norm/AttachToEntitySpec.scala b/quill-core/src/test/scala/io/getquill/norm/AttachToEntitySpec.scala
index d76c0f4..9ab4eff 100644
--- a/quill-core/src/test/scala/io/getquill/norm/AttachToEntitySpec.scala
+++ b/quill-core/src/test/scala/io/getquill/norm/AttachToEntitySpec.scala
@@ -7,6 +7,7 @@ import io.getquill.ast.Ident
 import io.getquill.ast.Map
 import io.getquill.ast.SortBy
 import io.getquill.testContext._
+import io.getquill.Query
 
 class AttachToEntitySpec extends Spec {
 
diff --git a/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictComplexSpec.scala b/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictComplexSpec.scala
index 9cd2847..24ec677 100644
--- a/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictComplexSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictComplexSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.norm.capture
 
 import io.getquill.Spec
 import io.getquill.testContext._
+import io.getquill.Query
 
 class AvoidAliasConflictComplexSpec extends Spec {
 
diff --git a/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictSpec.scala b/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictSpec.scala
index 16d20ec..d3ced4b 100644
--- a/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/norm/capture/AvoidAliasConflictSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.norm.capture
 
 import io.getquill.Spec
 import io.getquill.testContext._
+import io.getquill.Query
 
 class AvoidAliasConflictSpec extends Spec {
 
diff --git a/quill-core/src/test/scala/io/getquill/quotation/QuotationSpec.scala b/quill-core/src/test/scala/io/getquill/quotation/QuotationSpec.scala
index 7b646d9..1f2d4e4 100644
--- a/quill-core/src/test/scala/io/getquill/quotation/QuotationSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/quotation/QuotationSpec.scala
@@ -8,6 +8,8 @@ import io.getquill.context.ValueClass
 import io.getquill.norm.NormalizeStringConcat
 import io.getquill.testContext._
 import io.getquill.util.Messages
+import io.getquill.Ord
+import io.getquill.Query
 
 import scala.math.BigDecimal.{ double2bigDecimal, int2bigDecimal, javaBigDecimal2bigDecimal, long2bigDecimal }
 
@@ -1607,7 +1609,7 @@ class QuotationSpec extends Spec {
           object implicits extends Implicits
           import implicits._
           val q = quote(query[TestEntity].toRandom)
-          val l = q.liftings.`implicits.ToRadom(null.asInstanceOf[io.getquill.testContext.EntityQuery[io.getquill.testContext.TestEntity]]).toRandom.Implicits.this.random`
+          val l = q.liftings.`implicits.ToRadom(null.asInstanceOf[io.getquill.EntityQuery[io.getquill.testContext.TestEntity]]).toRandom.Implicits.this.random`
           l.value mustEqual 999
           l.encoder mustEqual intEncoder
         }
diff --git a/quill-core/src/test/scala/io/getquill/quotation/RebindSpec.scala b/quill-core/src/test/scala/io/getquill/quotation/RebindSpec.scala
index fb6722c..e1bcefd 100644
--- a/quill-core/src/test/scala/io/getquill/quotation/RebindSpec.scala
+++ b/quill-core/src/test/scala/io/getquill/quotation/RebindSpec.scala
@@ -3,6 +3,7 @@ package io.getquill.quotation
 import io.getquill.Spec
 import io.getquill.testContext._
 import io.getquill.testContext
+import io.getquill.Action
 
 class RebindSpec extends Spec {
 
diff --git a/quill-finagle-mysql/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala b/quill-finagle-mysql/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala
index c299650..8d1e564 100644
--- a/quill-finagle-mysql/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala
+++ b/quill-finagle-mysql/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala
@@ -5,6 +5,7 @@ import com.twitter.util.Future
 import io.getquill.context.Context
 import com.twitter.util.Try
 import scala.collection.compat._
+import io.getquill.{ Query, Action, BatchAction, ActionReturning }
 
 trait TwitterFutureIOMonad extends IOMonad {
   this: Context[_, _] =>
diff --git a/quill-finagle-mysql/src/test/scala/io/getquill/context/finagle/mysql/FinagleMysqlEncodingSpec.scala b/quill-finagle-mysql/src/test/scala/io/getquill/context/finagle/mysql/FinagleMysqlEncodingSpec.scala
index 1acd6a4..c05b6f6 100644
--- a/quill-finagle-mysql/src/test/scala/io/getquill/context/finagle/mysql/FinagleMysqlEncodingSpec.scala
+++ b/quill-finagle-mysql/src/test/scala/io/getquill/context/finagle/mysql/FinagleMysqlEncodingSpec.scala
@@ -7,6 +7,7 @@ import com.twitter.util.Await
 import io.getquill.context.sql.EncodingSpec
 import io.getquill.util.LoadConfig
 import io.getquill.{ FinagleMysqlContext, FinagleMysqlContextConfig, Literal }
+import io.getquill.Query
 
 import scala.concurrent.duration._
 
diff --git a/quill-finagle-postgres/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala b/quill-finagle-postgres/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala
index b56a5ed..ee5c46a 100644
--- a/quill-finagle-postgres/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala
+++ b/quill-finagle-postgres/src/main/scala/io/getquill/monad/TwitterFutureIOMonad.scala
@@ -8,6 +8,7 @@ import scala.util.Success
 import com.twitter.util.Throw
 import scala.util.Failure
 import com.twitter.util.Try
+import io.getquill.{ Query, Action, ActionReturning, BatchAction }
 
 trait TwitterFutureIOMonad extends IOMonad {
   this: Context[_, _] =>
diff --git a/quill-finagle-postgres/src/test/scala/io/getquill/context/finagle/postgres/FinaglePostgresEncodingSpec.scala b/quill-finagle-postgres/src/test/scala/io/getquill/context/finagle/postgres/FinaglePostgresEncodingSpec.scala
index c6d870b..d8e910b 100644
--- a/quill-finagle-postgres/src/test/scala/io/getquill/context/finagle/postgres/FinaglePostgresEncodingSpec.scala
+++ b/quill-finagle-postgres/src/test/scala/io/getquill/context/finagle/postgres/FinaglePostgresEncodingSpec.scala
@@ -6,6 +6,7 @@ import io.getquill.context.sql.EncodingSpec
 import com.twitter.util.Await
 import java.util.Date
 import java.util.UUID
+import io.getquill.Query
 
 class FinaglePostgresEncodingSpec extends EncodingSpec {
 
diff --git a/quill-jasync-postgres/src/test/scala/io/getquill/context/jasync/postgres/PostgresAsyncEncodingSpec.scala b/quill-jasync-postgres/src/test/scala/io/getquill/context/jasync/postgres/PostgresAsyncEncodingSpec.scala
index 186211d..ec6ff89 100644
--- a/quill-jasync-postgres/src/test/scala/io/getquill/context/jasync/postgres/PostgresAsyncEncodingSpec.scala
+++ b/quill-jasync-postgres/src/test/scala/io/getquill/context/jasync/postgres/PostgresAsyncEncodingSpec.scala
@@ -10,6 +10,7 @@ import scala.concurrent.Await
 import scala.concurrent.duration.Duration
 import java.util.Date
 import java.util.UUID
+import io.getquill.Query
 
 class PostgresAsyncEncodingSpec extends EncodingSpec {
 
diff --git a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/mysql/JdbcEncodingSpec.scala b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/mysql/JdbcEncodingSpec.scala
index 7fbc335..c869eba 100644
--- a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/mysql/JdbcEncodingSpec.scala
+++ b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/mysql/JdbcEncodingSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.jdbc.mysql
 
 import io.getquill.context.sql.EncodingSpec
+import io.getquill.Query
 
 class JdbcEncodingSpec extends EncodingSpec {
 
diff --git a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/ComplexQuerySpec.scala b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/ComplexQuerySpec.scala
index d2174dc..a849045 100644
--- a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/ComplexQuerySpec.scala
+++ b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/ComplexQuerySpec.scala
@@ -2,6 +2,7 @@ package io.getquill.context.jdbc.postgres
 
 import io.getquill.Spec
 import org.scalatest.BeforeAndAfter
+import io.getquill.Ord
 
 class ComplexQuerySpec extends Spec with BeforeAndAfter {
 
diff --git a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/JdbcEncodingSpec.scala b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/JdbcEncodingSpec.scala
index 7d9a105..c6e76f0 100644
--- a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/JdbcEncodingSpec.scala
+++ b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/postgres/JdbcEncodingSpec.scala
@@ -3,6 +3,7 @@ package io.getquill.context.jdbc.postgres
 import java.time.LocalDateTime
 
 import io.getquill.context.sql.EncodingSpec
+import io.getquill.Query
 
 class JdbcEncodingSpec extends EncodingSpec {
 
diff --git a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/sqlserver/JdbcEncodingSpec.scala b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/sqlserver/JdbcEncodingSpec.scala
index 2a88b16..ff245a6 100644
--- a/quill-jdbc/src/test/scala/io/getquill/context/jdbc/sqlserver/JdbcEncodingSpec.scala
+++ b/quill-jdbc/src/test/scala/io/getquill/context/jdbc/sqlserver/JdbcEncodingSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.jdbc.sqlserver
 
 import io.getquill.context.sql.EncodingSpec
+import io.getquill.Query
 
 class JdbcEncodingSpec extends EncodingSpec {
 
diff --git a/quill-ndbc-postgres/src/test/scala/io/getquill/context/ndbc/postgres/NdbcPostgresEncodingSpec.scala b/quill-ndbc-postgres/src/test/scala/io/getquill/context/ndbc/postgres/NdbcPostgresEncodingSpec.scala
index fd01456..3c73bbf 100644
--- a/quill-ndbc-postgres/src/test/scala/io/getquill/context/ndbc/postgres/NdbcPostgresEncodingSpec.scala
+++ b/quill-ndbc-postgres/src/test/scala/io/getquill/context/ndbc/postgres/NdbcPostgresEncodingSpec.scala
@@ -4,6 +4,7 @@ import java.time.{ LocalDate, LocalDateTime }
 import java.util.{ Date, UUID }
 
 import io.getquill.context.sql.EncodingSpec
+import io.getquill.Query
 
 class NdbcPostgresEncodingSpec extends EncodingSpec {
 
diff --git a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/EncodingSpec.scala b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/EncodingSpec.scala
index 0dbd463..0db9c01 100644
--- a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/EncodingSpec.scala
+++ b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/EncodingSpec.scala
@@ -3,6 +3,7 @@ package io.getquill.context.orientdb
 import java.util.Date
 
 import io.getquill.Spec
+import io.getquill.Query
 
 class EncodingSpec extends Spec {
 
diff --git a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBContextMacroSpec.scala b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBContextMacroSpec.scala
index c67a671..d865d43 100644
--- a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBContextMacroSpec.scala
+++ b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBContextMacroSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.context.orientdb
 
 import io.getquill.Spec
 import io.getquill.context.mirror.Row
+import io.getquill.Query
 
 class OrientDBContextMacroSpec extends Spec {
 
diff --git a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBIdiomSpec.scala b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBIdiomSpec.scala
index 87607e5..d0d4843 100644
--- a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBIdiomSpec.scala
+++ b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBIdiomSpec.scala
@@ -1,6 +1,9 @@
 package io.getquill.context.orientdb
 
 import io.getquill.Spec
+import io.getquill.Ord
+import io.getquill.Query
+import io.getquill.Action
 
 class OrientDBIdiomSpec extends Spec {
 
diff --git a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBQuerySpec.scala b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBQuerySpec.scala
index e072bf8..ccc7e7b 100644
--- a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBQuerySpec.scala
+++ b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/OrientDBQuerySpec.scala
@@ -5,6 +5,7 @@ import io.getquill.context.sql._
 import io.getquill.idiom.StatementInterpolator._
 import io.getquill.idiom.StringToken
 import io.getquill.{ Literal, Spec }
+import io.getquill.Ord
 
 class OrientDBQuerySpec extends Spec {
 
diff --git a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/PeopleOrientDBSpec.scala b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/PeopleOrientDBSpec.scala
index 66667d2..2cb38fd 100644
--- a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/PeopleOrientDBSpec.scala
+++ b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/PeopleOrientDBSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.orientdb
 
 import io.getquill.Spec
+import io.getquill.Query
 
 class PeopleOrientDBSpec extends Spec {
 
diff --git a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/QueryResultTypeOrientDBSync.scala b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/QueryResultTypeOrientDBSync.scala
index 094fc78..80bed20 100644
--- a/quill-orientdb/src/test/scala/io/getquill/context/orientdb/QueryResultTypeOrientDBSync.scala
+++ b/quill-orientdb/src/test/scala/io/getquill/context/orientdb/QueryResultTypeOrientDBSync.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.orientdb
 
 import io.getquill.Spec
+import io.getquill.Ord
 
 class QueryResultTypeOrientDBSync extends Spec {
 
diff --git a/quill-spark/src/test/scala/io/getquill/context/spark/DepartmentsSparkSpec.scala b/quill-spark/src/test/scala/io/getquill/context/spark/DepartmentsSparkSpec.scala
index 05289a4..07e943f 100644
--- a/quill-spark/src/test/scala/io/getquill/context/spark/DepartmentsSparkSpec.scala
+++ b/quill-spark/src/test/scala/io/getquill/context/spark/DepartmentsSparkSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.spark
 
 import io.getquill.Spec
+import io.getquill.Query
 
 case class Department(dpt: String)
 case class Employee(emp: String, dpt: String)
diff --git a/quill-spark/src/test/scala/io/getquill/context/spark/VariableShadowSpec.scala b/quill-spark/src/test/scala/io/getquill/context/spark/VariableShadowSpec.scala
index 34281c0..23d9318 100644
--- a/quill-spark/src/test/scala/io/getquill/context/spark/VariableShadowSpec.scala
+++ b/quill-spark/src/test/scala/io/getquill/context/spark/VariableShadowSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.spark
 
 import io.getquill.Spec
+import io.getquill.Query
 
 case class American(firstName: String, lastName: String, addressId: Int)
 case class Address1(id: Int, street: String, city: String)
diff --git a/quill-spark/src/test/scala/io/getquill/context/spark/examples/GithubExample.scala b/quill-spark/src/test/scala/io/getquill/context/spark/examples/GithubExample.scala
index d835138..9c5e963 100644
--- a/quill-spark/src/test/scala/io/getquill/context/spark/examples/GithubExample.scala
+++ b/quill-spark/src/test/scala/io/getquill/context/spark/examples/GithubExample.scala
@@ -5,7 +5,7 @@ import java.net.URL
 import scala.language.postfixOps
 import scala.sys.process._
 import org.apache.spark.sql.SparkSession
-import io.getquill.QuillSparkContext.Ord
+import io.getquill.Ord
 import io.getquill.QuillSparkContext._
 
 case class User(
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/DepartmentsSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/DepartmentsSpec.scala
index 9ab2feb..161a2b6 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/DepartmentsSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/DepartmentsSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.sql
 
 import io.getquill.Spec
+import io.getquill.Query
 
 trait DepartmentsSpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/DistinctSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/DistinctSpec.scala
index 88ea397..d86470f 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/DistinctSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/DistinctSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.sql
 
 import io.getquill.Spec
+import io.getquill.Ord
 
 trait DistinctSpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/PeopleSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/PeopleSpec.scala
index e1bda09..bac9ca9 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/PeopleSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/PeopleSpec.scala
@@ -1,6 +1,8 @@
 package io.getquill.context.sql
 
 import io.getquill.Spec
+import io.getquill.Ord
+import io.getquill.Query
 
 trait PeopleSpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/ProductSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/ProductSpec.scala
index 137557c..4cfd895 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/ProductSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/ProductSpec.scala
@@ -1,6 +1,7 @@
 package io.getquill.context.sql
 
 import io.getquill.Spec
+import io.getquill.Query
 
 case class Id(value: Long) extends AnyVal
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/QueryResultTypeSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/QueryResultTypeSpec.scala
index 3bfbb22..6c9c503 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/QueryResultTypeSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/QueryResultTypeSpec.scala
@@ -1,5 +1,7 @@
 package io.getquill.context.sql
 
+import io.getquill.Ord
+
 trait QueryResultTypeSpec extends ProductSpec {
 
   import context._
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/SqlQuerySpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/SqlQuerySpec.scala
index ff85656..6bd4b3f 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/SqlQuerySpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/SqlQuerySpec.scala
@@ -3,6 +3,8 @@ package io.getquill.context.sql
 import io.getquill.Spec
 import io.getquill.context.sql.testContext._
 import io.getquill.Literal
+import io.getquill.Query
+import io.getquill.Ord
 
 class SqlQuerySpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqlIdiomSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqlIdiomSpec.scala
index 4d4bef5..d775e9b 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqlIdiomSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqlIdiomSpec.scala
@@ -5,6 +5,9 @@ import io.getquill.{ MirrorSqlDialectWithReturnMulti, Spec }
 import io.getquill.context.mirror.Row
 import io.getquill.context.sql.testContext
 import io.getquill.context.sql.testContext._
+import io.getquill.Ord
+import io.getquill.Action
+import io.getquill.Query
 
 class SqlIdiomSpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqliteDialectSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqliteDialectSpec.scala
index 335d0f1..6376b02 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqliteDialectSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/idiom/SqliteDialectSpec.scala
@@ -4,6 +4,7 @@ import io.getquill.Literal
 import io.getquill.SqlMirrorContext
 import io.getquill.SqliteDialect
 import io.getquill.TestEntities
+import io.getquill.Ord
 
 class SqliteDialectSpec extends OnConflictSpec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/norm/ExpandMappedInfixSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/norm/ExpandMappedInfixSpec.scala
index 56e2697..629ebfe 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/norm/ExpandMappedInfixSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/norm/ExpandMappedInfixSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.context.sql.norm
 
 import io.getquill.Spec
 import io.getquill.context.sql.testContext._
+import io.getquill.Query
 
 class ExpandMappedInfixSpec extends Spec {
   "expand infix out of map body if first part is empty" in {
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/norm/FlattenGroupByAggregationSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/norm/FlattenGroupByAggregationSpec.scala
index 970638d..2ed9add 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/norm/FlattenGroupByAggregationSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/norm/FlattenGroupByAggregationSpec.scala
@@ -6,6 +6,7 @@ import io.getquill.ast.AggregationOperator
 import io.getquill.ast.Ident
 import io.getquill.ast.Property
 import io.getquill.context.sql.testContext._
+import io.getquill.Query
 
 class FlattenGroupByAggregationSpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/norm/JoinComplexSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/norm/JoinComplexSpec.scala
index cb51722..9622e37 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/norm/JoinComplexSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/norm/JoinComplexSpec.scala
@@ -2,6 +2,7 @@ package io.getquill.context.sql.norm
 
 import io.getquill.Spec
 import io.getquill.context.sql.testContext
+import io.getquill.Query
 
 // Advanced spec for join queries that tests various complex use cases
 class JoinComplexSpec extends Spec {
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesOverrideSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesOverrideSpec.scala
index fe5b4e8..7dff407 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesOverrideSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesOverrideSpec.scala
@@ -4,6 +4,7 @@ import io.getquill.ReturnAction.{ ReturnColumns, ReturnRecord }
 import io.getquill.context.sql.testContextUpper
 import io.getquill.context.sql.testContextUpper._
 import io.getquill.{ MirrorSqlDialectWithReturnClause, Spec }
+import io.getquill.Query
 
 class RenamePropertiesOverrideSpec extends Spec {
 
diff --git a/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesSpec.scala b/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesSpec.scala
index 2a5197f..202a43e 100644
--- a/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesSpec.scala
+++ b/quill-sql/src/test/scala/io/getquill/context/sql/norm/RenamePropertiesSpec.scala
@@ -4,6 +4,7 @@ import io.getquill.{ MirrorSqlDialectWithReturnClause, Spec }
 import io.getquill.ReturnAction.{ ReturnColumns, ReturnRecord }
 import io.getquill.context.sql.testContext._
 import io.getquill.context.sql.testContext
+import io.getquill.Query
 
 class RenamePropertiesSpec extends Spec {
 
